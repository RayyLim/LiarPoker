package com.example.liarpoker;

import java.util.ArrayList;

import android.app.Activity;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.Intent;
import android.os.Binder;
import android.os.Bundle;
import android.os.IBinder;
import android.util.Log;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

public class WaitRoomActivity extends Activity {
	
	private ListView playerList;
	
	private ArrayList<String> playerlistArrayList = new ArrayList<String>();
	private String[] playerlistArray;
	
	@Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        
        setContentView(R.layout.waitroom_main);
        
        // Get the message from the intent
        Intent intent = getIntent();
        String playername = intent.getStringExtra(MainActivity.PLAYERNAME);

        
        // Create the text view
        TextView textView = (TextView) findViewById(R.id.textView1);
        textView.setTextSize(40);
        textView.setText("Your name: " + playername);

        // BUG: List is not scroll-able.... button will not be visible if too many players
        playerList = (ListView) findViewById(R.id.playerlist);

        AddPlayer();      
    }
	
	int playerid = 0;
	public void AddPlayer(View view)
	{
		AddPlayer();
	}
	
	private void AddPlayer()
	{
		// Add player to private list
		playerlistArrayList.add(Integer.toString(playerid++));
		
		playerlistArray = new String[playerlistArrayList.size()];
		
		for(int i = 0; i < playerlistArrayList.size(); i++)
		{
			playerlistArray[i] = playerlistArrayList.get(i);
		}
		
	     // By using setAdpater method in listview we an add string array in list.
		playerList.setAdapter(new ArrayAdapter(this, android.R.layout.simple_list_item_1, playerlistArray));
	}
	
	public class LocalService extends Service {
	    private NotificationManager mNM;

	    // Unique Identification Number for the Notification.
	    // We use it on Notification start, and to cancel it.
	    private int NOTIFICATION = R.string.local_service_started;

	    /**
	     * Class for clients to access.  Because we know this service always
	     * runs in the same process as its clients, we don't need to deal with
	     * IPC.
	     */
	    public class LocalBinder extends Binder {
	        LocalService getService() {
	            return LocalService.this;
	        }
	    }

	    @Override
	    public void onCreate() {
	        mNM = (NotificationManager)getSystemService(NOTIFICATION_SERVICE);

	        // Display a notification about us starting.  We put an icon in the status bar.
	        showNotification();
	    }

	    @Override
	    public int onStartCommand(Intent intent, int flags, int startId) {
	        Log.i("LocalService", "Received start id " + startId + ": " + intent);
	        // We want this service to continue running until it is explicitly
	        // stopped, so return sticky.
	        return START_STICKY;
	    }

	    @Override
	    public void onDestroy() {
	        // Cancel the persistent notification.
	        mNM.cancel(NOTIFICATION);

	        // Tell the user we stopped.
	        Toast.makeText(this, R.string.local_service_stopped, Toast.LENGTH_SHORT).show();
	    }

	    @Override
	    public IBinder onBind(Intent intent) {
	        return mBinder;
	    }

	    // This is the object that receives interactions from clients.  See
	    // RemoteService for a more complete example.
	    private final IBinder mBinder = new LocalBinder();

	    /**
	     * Show a notification while this service is running.
	     */
	    private void showNotification() {
	        // In this sample, we'll use the same text for the ticker and the expanded notification
	        CharSequence text = getText(R.string.local_service_started);

	        // Set the icon, scrolling text and timestamp
	        Notification notification = new Notification(R.drawable.stat_sample, text,
	                System.currentTimeMillis());

	        // The PendingIntent to launch our activity if the user selects this notification
	        PendingIntent contentIntent = PendingIntent.getActivity(this, 0,
	                new Intent(this, LocalServiceActivities.Controller.class), 0);

	        // Set the info for the views that show in the notification panel.
	        notification.setLatestEventInfo(this, getText(R.string.local_service_label),
	                       text, contentIntent);

	        // Send the notification.
	        mNM.notify(NOTIFICATION, notification);
	    }

	
	}

}
